package BuildAPC;
public class BusinessLogic
{
	private BuildYourPC_Client _client;
	private OrderTracker _tracker;
	
	public BusinessLogic()
	{
		System.out.println("Instantiating BusinessLogic()");
		_client = new BuildYourPC_Client();
		_tracker = new OrderTracker();
	}
	
	/**
	Gets a new high range pre-built pc
	@return The pc that has been built
	*/
	public PC_Component getHighRange()
	{
		System.out.println("Executing BusinessLogic.getHighRange()");
		return _client.getHighRange();
	}
	
	/**
	Gets a new mid range pre-built pc
	@return The pc that has been built
	*/
	public PC_Component getMidRange()
	{
		System.out.println("Executing BusinessLogic.getMidRange()");
		return _client.getMidRange();
	}
	
	/**
	Gets a new low range pre-built pc
	@return The pc that has been built
	*/
	public PC_Component getLowRange()
	{
		System.out.println("Executing BusinessLogic.getLowRange()");
		return _client.getLowRange();
	}
	
	/**
	Attempts to place an order for the given pc with the given name and address in the OrderTracker. The reference number is generated by getting the current system time, which is checked to make sure that for some reason there isn't already an Order with the same reference. The method returns the reference should the order be successfully placed.
	@param pc The PC which is to be placed in the order
	@param name The name of the customer to be entered in the order
	@param address The shipping address of the order
	@return The reference to the newly placed order
	*/
	public String placeOrder(PC_Component pc, String name, String address)
	{
		System.out.println("Executing BusinessLogic.placeOrder(PC_Component, String, String)");
		String ref = String.valueOf(System.currentTimeMillis());
		if(_tracker.getOrderByReference(ref)!=null)
		{
			return null;
		}
		Order o = _tracker.placeOrder(pc,ref,name,address);
		if(o==null) return null;
		return ref;
	}
	
	/**
	Gets the name of the order referenced by orderRef
	@param orderRef the reference to the order whose name you wish to retrieve
	@return The name of the order returned by the tracker
	*/
	public String getOrderName(String orderRef)
	{
		System.out.println("Executing BusinessLogic.getOrderName(String)");
		Order o = _tracker.getOrderByReference(orderRef);
		if(o==null) return null;
		return o.getName();
	}
	
	/**
	Gets the address of the order referenced by orderRef
	@param orderRef the reference to the order whose name you wish to retrieve
	@return The address of the order returned by the tracker
	*/
	public String getOrderAddress(String orderRef)
	{
		System.out.println("Executing BusinessLogic.getOrderAddress(String)");
		Order o = _tracker.getOrderByReference(orderRef);
		if(o==null) return null;
		return o.getAddress();
	}
	
	/**
	Gets the list of components in the pc of the order referenced by orderRef
	@param orderRef the reference to the order whose name you wish to retrieve
	@return The list of components in the pc of the order returned by the tracker
	*/
	public String getOrderPCComponentList(String orderRef)
	{
		System.out.println("Executing BusinessLogic.getOrderPCComponentList(String)");
		PC_Component pc = _tracker.getPCOrderByReference(orderRef);
		if(pc==null) return null;
		return pc.toString();
	}
	
	/**
	Gets the cost of the pc of the order referenced by orderRef
	@param orderRef the reference to the order whose name you wish to retrieve
	@return The cost of the pc of the order returned by the tracker
	*/
	public double getOrderPCCost(String orderRef)
	{
		System.out.println("Executing BusinessLogic.getOrderPCCost(String)");
		PC_Component pc = _tracker.getPCOrderByReference(orderRef);
		if(pc==null) return 0.0;
		return pc.getCost();
	}
	
	/**
	Cancels the order referenced by orderRef
	@param orderRef the reference to the order whose name you wish to retrieve
	@return whether or not the cancel was successful
	*/
	public boolean cancelOrderByReference(String orderRef)
	{
		System.out.println("Executing BusinessLogic.cancelOrderByReference(String)");
		return _tracker.cancelOrderByReference(orderRef);
	}
	
	/**
	Gets the state of the order referenced by orderRef
	@param orderRef the reference to the order whose name you wish to retrieve
	@return The state of the order returned by the tracker
	*/
	public String getOrderStateByReference(String orderRef)
	{
		System.out.println("Executing BusinessLogic. getOrderStateByReference(String)");
		return _tracker.getOrderByReference(orderRef).getState();
	}
}
